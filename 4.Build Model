
# Define the model metrics and load the model
num_train_imgs = len(os.listdir(r'C:/Users/leela/OneDrive/OneDrive - hindustanuniv.ac.in/Desktop/Dataset/data/data_for_keras_aug/train_images/train/'))
num_val_images = len(os.listdir(r'C:/Users/leela/OneDrive/OneDrive - hindustanuniv.ac.in/Desktop/Dataset/data/data_for_keras_aug/val_images/val/'))

# Parameters for training
steps_per_epoch = num_train_imgs // batch_size
val_steps_per_epoch = num_val_images // batch_size

# Define the ConvBlock class
class ConvBlock(Layer):
    
    def __init__(self, filters=256, kernel_size=3, dilation_rate=1, **kwargs):
        super(ConvBlock, self).__init__(**kwargs)
        
        self.filters = filters
        self.kernel_size = kernel_size
        self.dilation_rate = dilation_rate
        
        self.net = Sequential([
            Conv2D(filters, kernel_size=kernel_size, padding='same', dilation_rate=dilation_rate, use_bias=False, kernel_initializer='he_normal'),
            BatchNormalization(), 
            ReLU()
        ])
    
    def call(self, X):
        return self.net(X)
    
    def get_config(self):
        base_config = super().get_config()
        return {
            **base_config,
            "filters": self.filters,
            "kernel_size": self.kernel_size,
            "dilation_rate": self.dilation_rate,
        }

# Atrous Spatial Pyramid Pooling (ASPP) Implementation
def AtrousSpatialPyramidPooling(X):
    B, H, W, C = X.shape

    # Image Pooling
    image_pool = AveragePooling2D(pool_size=(H, W), name="ASPP-AvgPool")(X)
    image_pool = ConvBlock(kernel_size=1, name="ASPP-ImagePool-CB")(image_pool)
    image_pool = UpSampling2D(size=(H//image_pool.shape[1], W//image_pool.shape[2]), name="ASPP-ImagePool-UpSample")(image_pool)

    # Other ASPP convolutions with different dilation rates
    conv_1x1 = ConvBlock(kernel_size=1, name="ASPP-Conv-1x1")(X)
    conv_3x3_1 = ConvBlock(kernel_size=3, dilation_rate=6, name="ASPP-Conv-3x3-1")(X)
    conv_3x3_2 = ConvBlock(kernel_size=3, dilation_rate=12, name="ASPP-Conv-3x3-2")(X)
    conv_3x3_3 = ConvBlock(kernel_size=3, dilation_rate=18, name="ASPP-Conv-3x3-3")(X)

    # Concatenation of the ASPP outputs
    output = Concatenate(axis=-1, name="ASPP-Concatenate")([image_pool, conv_1x1, conv_3x3_1, conv_3x3_2, conv_3x3_3])

    return output

# Build the DeepLabV3+ Model
LR = 1e-4 #3
IMAGE_SIZE = 256

# Input
InputL = Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 3), name="InputLayer")

# Base Model
resnet50 = ResNet50(include_top=False, weights='imagenet', input_tensor=InputL)

# ASPP Phase
DCNN = resnet50.get_layer('conv4_block6_2_relu').output
ASPP = AtrousSpatialPyramidPooling(DCNN)
ASPP = UpSampling2D(size=(IMAGE_SIZE//4//ASPP.shape[1], IMAGE_SIZE//4//ASPP.shape[2]), name="AtrousSpatial")(ASPP)

# LLF Phase
LLF = resnet50.get_layer('conv2_block3_2_relu').output
LLF = ConvBlock(filters=48, kernel_size=1, name="LLF-ConvBlock")(LLF)

# Combined
combined = Concatenate(axis=-1, name="Combine-LLF-ASPP")([ASPP, LLF])
features = ConvBlock(name="Top-ConvBlock-1")(combined)
features = ConvBlock(name="Top-ConvBlock-2")(features)
upsample = UpSampling2D(size=(IMAGE_SIZE//features.shape[1], IMAGE_SIZE//features.shape[1]), interpolation='bilinear', name="Top-UpSample")(features)

# Output
outputs = Conv2D(n_classes, kernel_size=1, activation='softmax', name="Final-Output")(upsample)
# DeepLabV3+ Model
model = Model(InputL, outputs, name="DeepLabV3-Plus")
model.summary()


from tensorflow.keras.utils import plot_model
# Plot and save the model architecture as a PNG image
plot_model(model, to_file="DeepLabV3+.png", show_shapes=True, dpi=96)

