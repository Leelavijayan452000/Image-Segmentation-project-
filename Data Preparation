
import os
import cv2
import numpy as np
from matplotlib import pyplot as plt
import segmentation_models as sm
from tensorflow.keras.metrics import MeanIoU
import random
from sklearn.preprocessing import MinMaxScaler
from keras.utils import to_categorical
from keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Layer, Conv2D, BatchNormalization, ReLU, Input, Concatenate, UpSampling2D, AveragePooling2D
from tensorflow.keras.models import Model, Sequential

# Updated paths
train_img_dir = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/train_images/train/"
train_mask_dir = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/train_masks/train/"
# List the images and masks
img_list = os.listdir(train_img_dir)
msk_list = os.listdir(train_mask_dir)

# Randomly select an image index
num_images = len(img_list)
img_num = random.randint(0, num_images - 1)

# Read the image and mask
img_for_plot = cv2.imread(os.path.join(train_img_dir, img_list[img_num]), 1)
img_for_plot = cv2.cvtColor(img_for_plot, cv2.COLOR_BGR2RGB)

mask_for_plot = cv2.imread(os.path.join(train_mask_dir, msk_list[img_num]), 0)

# Display the image and mask (optional, can be removed)
plt.figure(figsize=(12, 8))
plt.subplot(121)
plt.imshow(img_for_plot)
plt.title('Image')
plt.axis('off')  # Hide axes
plt.subplot(122)
plt.imshow(mask_for_plot, cmap='gray')
plt.title('Mask')
plt.axis('off')  # Hide axes
plt.show()

# Set random seed, batch size, and number of classes
seed = 24
batch_size = 16 #16
n_classes = 4

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Preprocessing function based on the backbone
BACKBONE = 'resnet50'
preprocess_input = sm.get_preprocessing(BACKBONE)

# Define a function to preprocess data
def preprocess_data(img, mask, num_class):
    # Scale images
    img = scaler.fit_transform(img.reshape(-1, img.shape[-1])).reshape(img.shape)
    img = preprocess_input(img)  # Preprocess based on the pretrained backbone...

    # Ensure mask values are within the valid range
    mask[mask >= num_class] = 0  # Map invalid values to a valid class (e.g., class 0)

    # Ensure all classes are present
    for i in range(num_class):
        if i not in mask:
            mask[mask == -1] = i  # Replace -1 (or any invalid value) with the current class index

    # Convert mask to one-hot encoding
    mask = to_categorical(mask, num_class)

    return (img, mask)

# Define the generator
def trainGenerator(train_img_path, train_mask_path, num_class):
    img_data_gen_args = dict(horizontal_flip=True,
                              vertical_flip=True,
                              fill_mode='reflect')

    image_datagen = ImageDataGenerator(**img_data_gen_args)
    mask_datagen = ImageDataGenerator(**img_data_gen_args)

    image_generator = image_datagen.flow_from_directory(
        train_img_path,
        class_mode=None,
        batch_size=batch_size,
        seed=seed)

    mask_generator = mask_datagen.flow_from_directory(
        train_mask_path,
        class_mode=None,
        color_mode='grayscale',
        batch_size=batch_size,
        seed=seed)

    while True:
        for (img, mask) in zip(image_generator, mask_generator):
            img, mask = preprocess_data(img, mask, num_class)
            yield (img, mask)
# Define paths
train_img_path = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/train_images/"
train_mask_path = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/train_masks/"

# Create the training generator
train_img_gen = trainGenerator(train_img_path, train_mask_path, num_class=n_classes)

val_img_path = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/val_images/"
val_mask_path = r"C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/val_masks/"

# Create the validation generator
val_img_gen = trainGenerator(val_img_path, val_mask_path, num_class=n_classes)

# Define the model metrics and load the model
num_train_imgs = len(os.listdir(r'C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/train_images/train/'))
num_val_images = len(os.listdir(r'C:/Users/leela/Desktop/Dataset/data/data_for_keras_aug/val_images/val/'))

# Parameters for training
steps_per_epoch = num_train_imgs // batch_size
val_steps_per_epoch = num_val_images // batch_size
