import os
import cv2
import numpy as np
import glob
from matplotlib import pyplot as plt
from patchify import patchify
from PIL import Image
import random
import logging
import splitfolders

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Parameters
PATCH_SIZE = 256
USEFUL_THRESHOLD = 0.05
ROOT_DIRECTORY = r'C:\Users\leela\OneDrive\OneDrive - hindustanuniv.ac.in\Desktop\Dataset\data'
IMAGES_DIR = os.path.join(ROOT_DIRECTORY, 'images/')
MASKS_DIR = os.path.join(ROOT_DIRECTORY, 'masks/')
PATCHES_DIR = os.path.join(ROOT_DIRECTORY, '256_patches/')
USEFUL_INFO_DIR = os.path.join(PATCHES_DIR, 'images_with_useful_info/')
TRAIN_TEST_DIR = os.path.join(ROOT_DIRECTORY, 'data_for_training_and_testing/')

def ensure_dir_exists(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# Create necessary directories
ensure_dir_exists(os.path.join(PATCHES_DIR, 'images'))
ensure_dir_exists(os.path.join(PATCHES_DIR, 'masks'))
ensure_dir_exists(USEFUL_INFO_DIR)
ensure_dir_exists(os.path.join(USEFUL_INFO_DIR, 'images'))
ensure_dir_exists(os.path.join(USEFUL_INFO_DIR, 'masks'))

# Quick understanding of the dataset
def explore_dataset(img_path, mask_path):
    try:
        temp_img = cv2.imread(img_path)
        plt.imshow(temp_img[:, :, 2])
        plt.title('Image Channel View')
        plt.show()

        temp_mask = cv2.imread(mask_path)
        labels, count = np.unique(temp_mask[:, :, 0], return_counts=True)
        logging.info(f"Labels are: {labels} and the counts are: {count}")
    except Exception as e:
        logging.error(f"Error exploring dataset: {e}")

# Patchify images and masks
def patchify_images(img_dir, patch_size, output_dir):
    for path, subdirs, files in os.walk(img_dir):
        for file in files:
            if file.endswith(".tif"):
                try:
                    image_path = os.path.join(path, file)
                    image = cv2.imread(image_path, 1)
                    size_x = (image.shape[1] // patch_size) * patch_size
                    size_y = (image.shape[0] // patch_size) * patch_size
                    image = Image.fromarray(image).crop((0, 0, size_x, size_y))
                    image = np.array(image)
                    
                    patches_img = patchify(image, (patch_size, patch_size, 3), step=patch_size)
                    for i in range(patches_img.shape[0]):
                        for j in range(patches_img.shape[1]):
                            single_patch_img = patches_img[i, j, :, :]
                            single_patch_img = single_patch_img[0]
                            cv2.imwrite(os.path.join(output_dir, f"{file}_patch_{i}{j}.tif"), single_patch_img)
                    logging.info(f"Patched image: {image_path}")
                except Exception as e:
                    logging.error(f"Error processing image {file}: {e}")

def patchify_masks(mask_dir, patch_size, output_dir):
    for path, subdirs, files in os.walk(mask_dir):
        for file in files:
            if file.endswith(".tif"):
                try:
                    mask_path = os.path.join(path, file)
                    mask = cv2.imread(mask_path, 0)
                    size_x = (mask.shape[1] // patch_size) * patch_size
                    size_y = (mask.shape[0] // patch_size) * patch_size
                    mask = Image.fromarray(mask).crop((0, 0, size_x, size_y))
                    mask = np.array(mask)
                    
                    patches_mask = patchify(mask, (patch_size, patch_size), step=patch_size)
                    for i in range(patches_mask.shape[0]):
                        for j in range(patches_mask.shape[1]):
                            single_patch_mask = patches_mask[i, j, :, :]
                            cv2.imwrite(os.path.join(output_dir, f"{file}_patch_{i}{j}.tif"), single_patch_mask)
                    logging.info(f"Patched mask: {mask_path}")
                except Exception as e:
                    logging.error(f"Error processing mask {file}: {e}")

# Visual verification
def visualize_patches(img_dir, mask_dir):
    img_list = os.listdir(img_dir)
    msk_list = os.listdir(mask_dir)
    if not img_list or not msk_list:
        logging.warning("No images or masks found for visualization.")
        return

    img_num = random.randint(0, len(img_list) - 1)
    img_for_plot = cv2.imread(os.path.join(img_dir, img_list[img_num]), 1)
    img_for_plot = cv2.cvtColor(img_for_plot, cv2.COLOR_BGR2RGB)
    mask_for_plot = cv2.imread(os.path.join(mask_dir, msk_list[img_num]), 0)

    plt.figure(figsize=(12, 8))
    plt.subplot(121)
    plt.imshow(img_for_plot)
    plt.title('Image')
    plt.subplot(122)
    plt.imshow(mask_for_plot, cmap='gray')
    plt.title('Mask')
    plt.show()

# Filter useful images and masks
def filter_useful_data(img_dir, mask_dir, output_dir, threshold):
    useless = 0
    img_list = os.listdir(img_dir)
    msk_list = os.listdir(mask_dir)

    for i in range(len(img_list)):
        img_name = img_list[i]
        mask_name = msk_list[i]

        try:
            temp_image = cv2.imread(os.path.join(img_dir, img_name), 1)
            temp_mask = cv2.imread(os.path.join(mask_dir, mask_name), 0)
            val, counts = np.unique(temp_mask, return_counts=True)

            if (1 - (counts[0] / counts.sum())) > threshold:
                cv2.imwrite(os.path.join(output_dir, 'images', img_name), temp_image)
                cv2.imwrite(os.path.join(output_dir, 'masks', mask_name), temp_mask)
                logging.info(f"Saved useful data: {img_name}")
            else:
                useless += 1
                logging.info(f"Filtered out useless data: {img_name}")

        except Exception as e:
            logging.error(f"Error processing data for {img_name}: {e}")

    logging.info(f"Total useful images: {len(img_list) - useless}")
    logging.info(f"Total useless images: {useless}")

# Split dataset
def split_dataset(input_folder, output_folder, ratio):
    try:
        splitfolders.ratio(input_folder, output=output_folder, seed=42, ratio=ratio)
        logging.info(f"Dataset split into {ratio} and saved to {output_folder}")
    except Exception as e:
        logging.error(f"Error splitting dataset: {e}")

# Main script execution
if __name__ == "__main__":
    explore_dataset(os.path.join(IMAGES_DIR, "M-34-51-C-d-4-1.tif"), os.path.join(MASKS_DIR, "M-34-51-C-d-4-1.tif"))
    
    patchify_images(IMAGES_DIR, PATCH_SIZE, os.path.join(PATCHES_DIR, 'images'))
    patchify_masks(MASKS_DIR, PATCH_SIZE, os.path.join(PATCHES_DIR, 'masks'))
    
    visualize_patches(os.path.join(PATCHES_DIR, 'images'), os.path.join(PATCHES_DIR, 'masks'))
    
    filter_useful_data(os.path.join(PATCHES_DIR, 'images'), os.path.join(PATCHES_DIR, 'masks'), USEFUL_INFO_DIR, USEFUL_THRESHOLD)
    
    split_dataset(USEFUL_INFO_DIR, TRAIN_TEST_DIR, (.75, .25))



